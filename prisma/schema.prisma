generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Bloco {
  id    String @id @default(uuid())
  nome  String @unique
  salas Sala[]
}

model Sala {
  id String @id @default(uuid())
  nome String
  blocoId String
  bloco Bloco @relation(fields: [blocoId], references: [id])
  climatizadores Climatizador[]

  @@unique([blocoId, nome])
}

model DispositivoControle {
  idEsp32 String @id
  modeloEsp32 String?
  online Boolean @default(false)
  ultimaConexao DateTime?
  ultimoPing DateTime?
  versaoFirmware String?
  climatizador Climatizador?
  
  @@index([online]) // Index para consultas de status
}

model Climatizador {
  id String @id @default(uuid())
  nome String
  marca String?
  modelo String?
  ligado Boolean @default(false)
  temperaturaDesejada Float?
  temperaturaAtual Float?
  umidadeAtual Float?
  modoOperacao String?
  velocidadeVentilador String?
  statusOperacional String @default("OK")
  ultimaManutencao DateTime?
  proximaManutencaoRecomendada DateTime?
  ultimaAtualizacao DateTime @default(now()) @updatedAt
  
  // Relações
  sala Sala @relation(fields: [salaId], references: [id])
  salaId String
  dispositivoControle DispositivoControle @relation(fields: [dispositivoControleId], references: [idEsp32])
  dispositivoControleId String @unique

  @@index([ligado]) // Index para consultas de status
  @@index([salaId]) // Index para relação com sala
}

model Configuracao {
  id Int @id @default(1)
  notificationsEnabled Boolean @default(true)
  temperatureRangeMin Int @default(16)
  temperatureRangeMax Int @default(30)
  maintenanceInterval Int @default(30)
  mqttBroker String @default("mqtt://localhost")
  mqttPort String @default("1883")
  mqttUsername String @default("")
  mqttPassword String @default("")
  updatedAt DateTime @updatedAt
}


// Modelos para autenticação e autorização
model User {
  id String @id @default(uuid())
  email String @unique
  name String?
  password String
  role String @default("VISUALIZADOR") // ADMIN, OPERADOR, VISUALIZADOR
  active Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  
  // Relacionamentos NextAuth
  accounts Account[]
  sessions Session[]
  
  @@index([email])
  @@index([role])
}

model Account {
  id String @id @default(uuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(uuid())
  sessionToken String @unique
  userId String
  expires DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token String @unique
  expires DateTime
  
  @@unique([identifier, token])
}

